apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.bmuschko.docker-remote-api"

group 'com.apps'
version '1.0'

sourceCompatibility = 13

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    compile "org.springframework.kafka:spring-kafka:${springKafka}"
    compile "com.oracle.ojdbc:ojdbc8:19.3.0.0"

    runtime "org.liquibase:liquibase-core:${liquibaseVersion}"
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

def dockerBuildDir = './'
def imageName = 'depositary'
def imageVersion = '1.0'
def containerName = 'depositary'

//task createDockerfile(type: Dockerfile) {
//    destFile = project.file("$dockerBuildDir/Dockerfile")
//    from 'openjdk:8-jre-alpine'
//    copyFile jar.archiveName, '/app/test_service.jar'
//    entryPoint 'java'
//    defaultCommand '-jar', '/app/test_service.jar'
//    exposePort 8080
//    runCommand 'apk --update --no-cache add curl'
//    instruction 'HEALTHCHECK CMD curl -f http://localhost:8080/hello || exit 1'
//}


task stopContainer(type: DockerStopContainer) {
    targetContainerId("$containerName")
    onError { exc ->
        if (exc.message!=null && !exc.message.contains('No such container')) {
            println "$containerName Container not found"
        }
    }
}

task removeContainer(type: DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId("$containerName")
    onError { exc ->
        if (exc.message!=null && !exc.message.contains('No such container')) {
            println "$containerName Container not found"
        }
    }
}

task removeImage(type: DockerRemoveImage) {
    dependsOn removeContainer
    targetImageId("$imageName")
    onError { exc ->
        if (exc.message!=null && !exc.message.contains('No such image')) {
            println "$imageName Image not found"
        }
    }
}

task buildImage(type: DockerBuildImage) {
    dependsOn removeImage
    inputDir = project.file(dockerBuildDir)
    images.add("$imageName")
}

build.finalizedBy(buildImage)

//task createContainer(type: DockerCreateContainer) {
//    dependsOn buildImage, removeContainer
//    targetImageId buildImage.getImageId()
//    containerName = "$containerName"
//    portBindings = ['8080:8080']
//}

//task startContainer(type: DockerStartContainer) {
//    dependsOn createContainer
//    targetContainerId("$containerName")
//}
