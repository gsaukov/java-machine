plugins {
    id 'org.springframework.boot'
    id 'java'
}

apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group 'com.apps'
version '1.0'

sourceCompatibility = 17

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom 'org.springframework.session:spring-session-bom:Bean-SR2'
    }
}

dependencies {
    compile project(':misc')
    
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.liquibase:liquibase-core"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.cloud:spring-cloud-starter-zipkin"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.session:spring-session-data-redis"
    compile "redis.clients:jedis:${jedisVersion}"
    compile 'org.springframework.security:spring-security-oauth2-core'
    compile "org.springframework.security:spring-security-oauth2-client:${springOauthClientVersion}"
    compile "org.springframework.security.oauth:spring-security-oauth2:${springOauthVersion}"
    compile "org.springframework.security:spring-security-jwt:${springJwtVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-task"
    compile "javax.persistence:javax.persistence-api"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    compile "org.springframework.data:spring-data-commons"
    compile "org.springframework.data:spring-data-cassandra"

    compile "org.cassandraunit:cassandra-unit-spring:${cassandraUnitVersion}"
    compile "org.cassandraunit:cassandra-unit-shaded:${cassandraUnitVersion}"
    compile "com.datastax.cassandra:cassandra-driver-core:${cassandraDriverCoreVersion}"
    compile "com.datastax.cassandra:cassandra-driver-mapping:${cassandraDriverMappingVersion}"

    compile "org.hectorclient:hector-core:${hectorCoreVersion}"
    compile "io.dropwizard.metrics:metrics-core:${dropWizardMetricsCoreVersion}"
    compile "org.jsoup:jsoup:${jsoupVersion}"
    compile "org.joda:joda-money:${jodaMoneyVersion}"
    compile "fr.dudie:nominatim-api:${nominatimApiVersion}"
    compile "org.codehaus.jettison:jettison:1.4.1"

//    runtime "com.h2database:h2:${h2Version}"
    runtime "mysql:mysql-connector-java:${mySqlVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.testng:testng:${testngVersion}"

    annotationProcessor('org.hibernate:hibernate-jpamodelgen')
}

// comment this if it does not compile and you do no use nginx as resource server (localhost:9020)
task copyResources (dependsOn: clean) {
//    delete '${nginxPath}html/static'
//
//    copy {
//        from './src/main/resources/static/'
//        into "${nginxPath}html/static"
//    }
//
//    delete '${nginxPath}conf/nginx.conf'
//
//    copy {
//        from './src/main/resources/'
//        into "${nginxPath}conf/"
//        include "nginx.conf"
//    }
}

compileJava.dependsOn copyResources

sourceSets {
    main { 
        java {
            srcDirs += ['src/resources']
            srcDirs += ['src/generated/java']
        }
    }
}

bootJar {
    mainClassName = 'com.apps.searchandpagination.SearchDataApplication'
}

springBoot {
    mainClassName = 'com.apps.searchandpagination.SearchDataApplication'
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file("src/generated/java")
}


task testng(type: Test) {
    useTestNG()
}

check.dependsOn testng