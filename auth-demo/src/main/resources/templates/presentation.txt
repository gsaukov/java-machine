
Hi guys, welcome to Digital Trust talk.

My name is Georgy Saukov and I m software enginer here at Wirecard Germany. Before that I was doing software in Moscow. Before Moscow I was growing and studing somwhere in central Asia. That living expirience showed me that trust is something very important I would evn say it is background for human social relations. Any social form of organisation family, company, state based on trust are the most effective. Human trust has biochemical origin and is regulated by Oxitacin without it you will not be able to love, befriend or be a parent.

--Trust could also do evil things, recently I have watched Irishman, amazing movie about trust, betrail and remorse.

For the digital world Trust has the same importance.

Today I will show you how one of the most important problems in Human Computer communication Authentication was solve last during last decade.

We will see how it evolved with a time, what do we have now and where we going in near future. Also I think that this decade 2020 - 2030 we or could be computers themselves will be solving Authentication problem between computer computer.

Authentication answers very simple question. Who are you?

Human brain has amazing capability, to identify other people. We do it fully based biometric of our face, body shape and voice. It makes impersonating another person very difficult because we are very unique ourselves. We store this data deep in our brain and match it every time we try to identify some one.
The brain is so cool that it identify people through a time, you can identify peoples after a 40 years machines can not do it at all.
If you want see what happens when your brain lose this capabilities i strongly recommend you movie "Memento" it is a criminal drama where protagonist suffers strong retrograde amnesia when can not event identify him self.

Digital biometric authentication strongly inferior to human brain. So the only rational way to become unique for the computer is to keep in your memory unique combination of symbols that only you have. This symbol sequence password.

SSL/TLS has become an integral part of web technologies and continues to be refined and updated. If your clients use it, make certain that they choose a more secure TLS implementation, as SSL is out of date and has significant vulnerabilities.

The problem comes that you can not directly transmit data from your brain directly to computer that wants to Authentify you.

You have too pass it through physical device(your PC or), operating system, application (browser or app) at some point it falls into network abyss where it flies through the servers, routers till.

And of course first attempts to pass credentials via internet were completely insecure:

Welcome to Basic Auth where password is trnasmitted via headers or url itself.

There are a few issues with HTTP Basic Auth:

    The password is sent over the wire in base64 encoding (which can be easily converted to plaintext).
    The password is sent repeatedly, for each request. (Larger attack window)
    The password is cached by the webbrowser, at a minimum for the length of the window / process. (Can be silently reused by any other request to the server, e.g. CSRF).
    The password may be stored permanently in the browser, if the user requests. (Same as previous point, in addition might be stolen by another user on a shared machine).

Of those, using SSL only solves the first. And even with that, SSL only protects until the webserver - any internal routing, server logging, etc, will see the plaintext password.

So, as with anything it's important to look at the whole picture.

Does HTTPS protect the password in transit? Yes.

Is that enough? Usually, no.

Next try is Form auth which was much safer because in exchange for password you would get authcookie that is stored in browser. So you dont need to resend password every time. Your password was by passed to the AuthServer in body mixed with tags and other parameters.

Whole password handling should be taken away from the application.

But the problem that appeared that systems that would require you Authentication rapidly grew, increasing the risk of password leak on the back end if it is not properly secured you password could leak during attack or inside data steal.
Human factor on the backend is overhelming, you dont need super smart attack just one system admin fell i n love in to wrong girl.

(I on purpose dont want to call it security) later i will tell you why.

I will talk only about

For that i ve prepared a JavaScript based tool integrated into this slides, set of backend servers Spring Security, Facebook Graph API and Spotify.

https://www.youtube.com/watch?v=ytFXfY_Jpzk&t=868s

PKCE

IOT world becomes self sufficient and will play bigger role in our life the only unique thing digital they may have is token. People will have passwords and Biometrics, in exchange for that we will get tokens.

Compromised passwords from old registrations.

i m waiting for a time when device or a system will not authorize you daily rutin operation liek driwing a car Gretta.

Interesting that during creation of this talk i caught myself on the idea that we now have living not living and digital.

Authentication schemes:

    Basic (see RFC 7617, base64-encoded credentials. See below for more information.),
    Bearer (see RFC 6750, bearer tokens to access OAuth 2.0-protected resources),
    Digest (see RFC 7616, only md5 hashing is supported in Firefox, see баг 472823 for SHA encryption support),
    HOBA (see RFC 7486 (draft), HTTP Origin-Bound Authentication, digital-signature-based),
    Mutual (see draft-ietf-httpauth-mutual),

    AWS4-HMAC-SHA256 (see AWS docs).


String v = new String( to.array(), StandardCharsets.UTF_8 );
.


byte[] ar = socket.getBufHandler().getReadBuffer().array();
String v = new String( ar, StandardCharsets.UTF_16LE );




org.apache.tomcat.jni.SSLSocket

javax.net.ssl.SSLSocket

sun.security.ssl.BaseSSLSocketImpl

org.apache.tomcat.jni.Socket


org.apache.tomcat.util.net.SecureNioChannel

byte[] ar = ((SecureNioChannel) socket).netInBuffer.array();
String v = new String( ar, StandardCharsets.UTF_8 );
org.apache.tomcat.util.net.NioEndpoint#setSocketOptions
wrapped SSLEngineResult

unwrapped /org/apache/tomcat/util/net/NioEndpoint.java:1409
byte[] ar = socket.getAppReadBufHandler().getByteBuffer().array();
String v = new String( ar, StandardCharsets.UTF_8 );

authorization_code
sequenceDiagram
    participant RO as Resource Owner<br/>(browser)
    participant CA as Client App<br/>(yelp.com)
    participant AS as Authorization Server<br/>(Google)
    participant RS as Resource Server<br/>(Contacts API)
    RO->>CA: 1. Click Login with Google
    CA->>RO: 2. Redirect...
    RO->>AS: 3. ...to Google Login
    AS->>RO: 4. Returns Login Form
    RO->>AS: 5. Submits Credentials
    note right of AS: authenticate user
    AS->>RO: 6. Redirect with code...
    RO->>CA: 7. ...to App with code
    CA->>AS: 8. Request Token
    note over CA,AS: request includes:<br/>Client ID, Client Secret & code
    note right of AS: validate:<br/>- Client ID<br/>- Client Secret<br/>- code
    AS->>CA: 9. Return Token
    CA->>RS: 10. API Request with Token
    note right of RS: validate Token
    RS->>CA: 11. API Response

okta-auth-js-pkce-example
sequenceDiagram
    participant CA as Client App<br/>(SPA in Browser)
    participant AS as Authorization Server<br/>(Google)
    participant RS as Resource Server<br/>(Contacts API)
    loop 1. Login w/Google
        CA->>CA: 2. Redirect...
    end
    CA->>AS: 3. ...to Google Login
    AS->>CA: 4. Returns Login Form
    CA->>AS: 5. Submits Credentials
    note right of AS: authenticate user
    AS->>CA: 6. Respond with TOKENS
    CA->>RS: 7. API Request with Token
    note right of RS: validate Token
    RS->>CA: 8. API Response

pkce
sequenceDiagram
    participant RO as Resource Owner
    participant CA as Client App (vue.js)
    participant AS as Authorization Server
    RO->>CA: 1. Access App
    note right of CA: create random (v)<br/>$ = sha256(v)
    CA->>RO: 2. Redirect with $
    RO->>AS: 3. Redirect to Login with $
    note right of AS: store $
    AS->>RO: 4. Returns Login Form
    RO->>AS: 5. Submits Credentials
    note right of AS: authenticate user
    AS->>RO: 6. Redirect with code (α)
    RO->>CA: 7. Redirect to App with code (α)
    CA->>AS: 8. Request Token
    note over CA,AS: request includes:<br/>Client ID, (v), (α)
    note right of AS: validate:<br/>- Client ID<br/>- sha256(v) = $<br/>- (α)
    AS->>CA: 9. Return Token



org.apache.tomcat.util.net.Acceptor
org.apache.tomcat.util.net.NioEndpoint
org.apache.tomcat.util.net.SecureNioChannel
org.apache.tomcat.util.net.TLSClientHelloExtractor

java.security.KeyPairGenerator#getInstance(java.lang.String)




        // For a TLS client hello the first byte must be 22 - handshake
        if (bb.get() != 22) {
            return false;
        }
        // Next two bytes are major/minor version. We need at least 3.1.


        TLS 1.3 comes with java 11 or higher.

		KeyPairGenerator.getInstance("XDH").genKeyPair(); // works only with java 11 or higher
		KeyPairGenerator.getInstance("RSA").genKeyPair();
		
		
	TLS 1.2 - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	TLS 1.3 - TLS_AES_128_GCM_SHA256
	
	
	
Security scanners.
https://securityheaders.com
https://www.ssllabs.com/ssltest/
	
	
	https://examples.javacodegeeks.com/core-java/nio/java-nio-ssl-example/
	https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/
		