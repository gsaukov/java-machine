Hi guys, welcome to Artifitial Trust talk.

My name is Georgy Saukov and I m software enginer here at Wirecard Germany. Before that I was doing software in Moscow. Before Moscow I was growing and studing somwhere in central Asia. That living expirience showed me that trust is something very important I would evn say it is background for human social relations. Any social form of organisation family, company, state based on trust are the most effective. Human trust has biochemical origin and is regulated by Oxitacin without it you will not be able to love, befriend or be a parent.

--Trust could also do evil things, recently I have watched Irishman, amazing movie about trust, betrail and remorse.

For the digital world Trust has the same importance.

Today I will show you how one of the most important Trust pro between Human and Computer works today (I on purpose dont want to call it security) later i will tell you why. How it volved with a time, what do we have now and where we going in nar future.

I will talk only about small

For that i ve prepared a JavaScript based tool integrated into this slides, set of backend servers Spring Security, Facebook Graph API and Spotify.

https://www.youtube.com/watch?v=ytFXfY_Jpzk&t=868s

PKCE

IOT world becomes self sufficient and will play bigger role in our life the only unique thing digital they may have is token. People will have passwords and Biometrics, in exchange for that we will get tokens.

Compromised passwords from old registrations.

i m waiting for a time when device or a system will not authorize you daily rutin operation liek driwing a car Gretta.

Interesting that during creation of this talk i caught myself on the idea that we now have living not living and digital.

authorization_code
sequenceDiagram
    participant RO as Resource Owner<br/>(browser)
    participant CA as Client App<br/>(yelp.com)
    participant AS as Authorization Server<br/>(Google)
    participant RS as Resource Server<br/>(Contacts API)
    RO->>CA: 1. Click Login with Google
    CA->>RO: 2. Redirect...
    RO->>AS: 3. ...to Google Login
    AS->>RO: 4. Returns Login Form
    RO->>AS: 5. Submits Credentials
    note right of AS: authenticate user
    AS->>RO: 6. Redirect with code...
    RO->>CA: 7. ...to App with code
    CA->>AS: 8. Request Token
    note over CA,AS: request includes:<br/>Client ID, Client Secret & code
    note right of AS: validate:<br/>- Client ID<br/>- Client Secret<br/>- code
    AS->>CA: 9. Return Token
    CA->>RS: 10. API Request with Token
    note right of RS: validate Token
    RS->>CA: 11. API Response

okta-auth-js-pkce-example
sequenceDiagram
    participant CA as Client App<br/>(SPA in Browser)
    participant AS as Authorization Server<br/>(Google)
    participant RS as Resource Server<br/>(Contacts API)
    loop 1. Login w/Google
        CA->>CA: 2. Redirect...
    end
    CA->>AS: 3. ...to Google Login
    AS->>CA: 4. Returns Login Form
    CA->>AS: 5. Submits Credentials
    note right of AS: authenticate user
    AS->>CA: 6. Respond with TOKENS
    CA->>RS: 7. API Request with Token
    note right of RS: validate Token
    RS->>CA: 8. API Response

pkce
sequenceDiagram
    participant RO as Resource Owner
    participant CA as Client App (vue.js)
    participant AS as Authorization Server
    RO->>CA: 1. Access App
    note right of CA: create random (v)<br/>$ = sha256(v)
    CA->>RO: 2. Redirect with $
    RO->>AS: 3. Redirect to Login with $
    note right of AS: store $
    AS->>RO: 4. Returns Login Form
    RO->>AS: 5. Submits Credentials
    note right of AS: authenticate user
    AS->>RO: 6. Redirect with code (α)
    RO->>CA: 7. Redirect to App with code (α)
    CA->>AS: 8. Request Token
    note over CA,AS: request includes:<br/>Client ID, (v), (α)
    note right of AS: validate:<br/>- Client ID<br/>- sha256(v) = $<br/>- (α)
    AS->>CA: 9. Return Token