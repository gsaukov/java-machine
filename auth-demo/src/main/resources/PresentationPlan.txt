Presentation plan:

1. So our plan is to do very simple 
	Make sure that we speak with the server we want and no one else.
	Make sure that chanel we speak is secure and understood only to us two.
	Make sure that server know who we are.

	And it is extraordinaly complex thing to do.

	The toolset to achive this is:
	
	Encryption
	Certificates
	Key exchange algorithms.

2. Encryption f(x) = y. Phylosophy behind this: if you know x it is very easy to find y. If you know y it is almost impossible to find y.

3. In reality of symmetric encription it is two functions:
	f encrypt(x, z) = y. 		
	f decrypt(x, y) = z;
	
		x - secret, key, password. 
		z - payload.
		y - encrypted data
		
4. Symmetric encryption has a problem, if you want to add aprticipants to your encrypted comunication, you have to share x with them. 
	And it makes symmetric encryption very vulnerable to loss of the key or x.

5. This vulnerability is solved by assymetric encryption. Where we split x on to two parts k public and s private.
	There are two absolutely overhelming mathematical ways how to split x onto k and s parts but keep link between them:
		one is RSA based on gigantic prime numbers.
		second is Elliptic Curve algorithm based on two crossin elliptic curves.
		
		*************************************
		*	ELIPTIC CURVES PICTURE HERE		*
		*************************************
		
6. Assymetric encryption in this case would look like this:
		f encrypt(s, z) = y. 		
		f decrypt(k, y) = z;
	
		*************************************
		*	KEYS PICTURE HERE 				*
		*************************************
	
			s - public key. It lets anyone whom you gave the key encrypt the data.
			k - private key. Only you can decrypt it.
			z - payload.
			y - encrypted data.

7. Combination Encryption actions its different algorithms/compression methods/hashing and other properties is called CIPHER SUITE. More about cipher suits you can find here:
	https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html
	
8. The most famous use of Assymetric Encryption is Certificate signature.
	Certificates. In short Certificates Are site or host identities. They also hold basic information like country, city, company.
		Most important is [CN] or Common name and [SAN] Subject Alternative Names which tells you hostname or site that owns certificate. Like wikipedia.com for examples.

		*************************************
		*	CERTIFICATE PICTURE HERE 		*
		*************************************
	
	Tools for managing and creating ceritificates you can use KeyTool from Oracle, or OpenSSL.
	For programmatic/dynamic certificate creation/management BouncyCastle library.
	

9. To avoid situation when anyone can issue google.com certificate all certificates mu st be signed with a root certificate.
	In two words root certificates (sometimes called trust certificates) are public keys issued by very trusted Organizations (Certificate Authorities) like Google, Symantec, GoDaddy, LetsEncrypt and so on.

	f encrypt(s, c) = y
	
	For succesfull validation y must equal to hash provided in certificate.
	
	s - public key. It lets anyone whom you gave the key encrypt the data.
	c - certificate.
	y - encrypted data.
	
	*************************************
	*	ROOT CERTIFICATES PICTURE HERE	*
	*************************************


10. The place where you hold Root certificates or whom you trust is called Truststore. 
	*************************************
	*	TRUSTSTORE PICTURE HERE			*
	*************************************

The place where you hold your issued ceritificate with your private and public keys is called Keystore. 

	*************************************
	*	KEYSTORE PICTURE HERE			*
	*************************************


11. Above given very primitive Certificate signing and validation Algorithms. If Want to know more and how it really works? 
	see X509 and PKIX. Also In Java you can find following classes:
    sun.security.provider.certpath.PKIXCertPathValidator
    java.security.cert.CertPathValidator
	
	link  https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html

	https://letsencrypt.org/ if you want to generate free certificate for your site.
	
	Certificate Authorities "Trusted Organizations" a part of politics now since it is one keystone of internet regulations. Since they come usually preinstalled as a part of Software or Hardware.
	If certificate mechanics goes wrong any one can impersonate anyone.
	With growth of IOT world, certificates could be a part of Economical or corporational wars.
	
	Most of the smart phone or any other intelegent device control like locking, monitoring, misusing or getting orders from vendors is based on prebuiled encrypted trust stores and open ports.
	
	Keyword for those who are interested Intel Management Engine that is prebuild into every intell PC including mine. It operates system in paralell with OS and has access to all of you computer.
	https://www.youtube.com/watch?v=Y2_-VXz9E-w 
	In two words my pc is running MINIX unix based operating system and i dont know what it does. And intel tries to hide it from me as much as it can.
	
	And one more thing if you want to see how strong is CIPHER SUITES and Authority centers used by external resource here are some security scanners:
	https://securityheaders.com
	https://www.ssllabs.com/ssltest/
	
12. So now we have pretty much everything to start our journey to the server we trust. 

	*****************************************************
	*	PICTURE OF SUITS, CERTIFICATES, PICTURE HERE	*
	*****************************************************
	
	Our first step is to do a handshake with him.
	
13. Process of establishing secure comunication between us and desired server is SSL or TLS Handshake. 
	There is possibility to do RSA handshake respective to TLS 1.2 but we will do latest TLS 1.3
	
	*****************************
	*	MAP PICTURE HERE		*
	*****************************
	
	With traces and links:
	
	All the below operation are conducted as byte changing operations on Server side NetBuffer, Client and will exchange bytes and symulteneously or assynchronyously monitor it.
	
    1. Client hello: The client sends a client hello message with the protocol version, the client random, and a list of cipher suites.
		// For a TLS client hello the first byte must be 22 - handshake.
	2. Server hello: The server replies with its SSL certificate, its selected cipher suite, and the server random. In contrast to the RSA handshake described above, in this message the server also includes the following (step 3):
    3. Server's digital signature: The server uses its private key to encrypt the client random, the server random, and its DH parameter*. This encrypted data functions as the server's digital signature, establishing that the server has the private key that matches with the public key from the SSL certificate.
    4. Digital signature confirmed: The client decrypts the server's digital signature with the public key, verifying that the server controls the private key and is who it says it is. Client DH parameter: The client sends its DH parameter to the server.
    
	*********************************
	*	FORGING PICTURE IN POPUP	*
	********************************* 

	
	5. Client and server calculate the premaster secret: Instead of the client generating the premaster secret and sending it to the server, as in an RSA handshake, the client and server use the DH parameters they exchanged to calculate a matching premaster secret separately.
    
	*****************************
	*	DH PICTURE IN POPUP		*
	*****************************
	
	Diffie Hellman Key exchange is stronger than RSA key exchange because it doesnt involve public or private keys, so if private key used during RSA exchange is stolen it is possible to retrospectively decrypt previous session key exchanges and using gathered session keys decrypt all traffic.
	With Diffie Hellman there are no stable keys everything exists session time, so there is no way to retrospectivly decrypt the trafic.
		
	6. Session keys created: Now, the client and server calculate session keys from the premaster secret, client random, and server random, just like in an RSA handshake.
    7. Client is ready, Server is ready.
    8. Secure symmetric encryption achieved. Session key is created.
	9. Request is sent to server and can be decrypted with session key.
	

14. <h1><strong>How it works in java:</strong></h1>

<h2>To enable TLS  in Spring boot:</h2>

<h2>ssl:
    <br>&nbsp;&nbsp;&nbsp;&nbsp;key-store: classpath:keystore.p12
    <br>&nbsp;&nbsp;&nbsp;&nbsp;key-store-password: srch4app
    <br>&nbsp;&nbsp;&nbsp;&nbsp;keyStoreType: PKCS12
    <br>&nbsp;&nbsp;&nbsp;&nbsp;keyAlias: tomcat
    <br>&nbsp;&nbsp;&nbsp;&nbsp;enabled-protocols: TLSv1.3 # only JAVA 11 and higher.</h2>

<h2>Java areas that does TLS magic:</h2>
	<div style="margin-left: 2em;">
		<li><h2>javax.net.ssl.SSLSocket</h2></li>
		<li><h2>java.security.KeyPairGenerator</h2></li>
		<li><h2>sun.security.ssl.BaseSSLSocketImpl</h2></li>
		<h2><br></h2>
		<li><h2>sun.security.ssl.SSLEngineImpl</h2></li>
		<li><h2>javax.net.ssl.SSLEngineResult</h2></li>
		<h2><br></h2>
		<li><h2>org.apache.tomcat.jni.Socket</h2></li>
		<li><h2>org.apache.tomcat.util.net.SecureNioChannel</h2></li>
		<li><h2>org.apache.tomcat.util.net.Acceptor</h2></li>
		<li><h2>org.apache.tomcat.util.net.NioEndpoint</h2></li>
		<li><h2>org.apache.tomcat.util.net.SecureNioChannel</h2></li>
		<li><h2>org.apache.tomcat.util.net.TLSClientHelloExtractor</h2></li>
		<li><h2>org.apache.tomcat.jni.SSLSocket</h2></li>
	</div>
15. <h1><strong>If you want to play a bit more with key generation.</strong></h1>

    TLS 1.3 comes with java 11 or higher.

	KeyPairGenerator.getInstance("XDH").genKeyPair(); // works only with java 11 or higher
	KeyPairGenerator.getInstance("RSA").genKeyPair();
		
		
	TLS 1.2 best cipher suite - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	TLS 1.3 best cipher suite - TLS_AES_128_GCM_SHA256
	
	Some usefull links:
	Good entrypoint article about TLS  https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/
	TLS 1.3 200 ms TLS 1.2 300 speed performance https://kinsta.com/blog/tls-1-3/
	TLS 1.3 vs 1.2 Byte performance comparision https://www.wolfssl.com/tls-1-3-performance-part-2-full-handshake-2/
	Handmade TLS in JAVA step by step with explanations and code: https://examples.javacodegeeks.com/core-java/nio/java-nio-ssl-example/

	Questions what is not encrypted by SSL during the call?
	Is there any difference between post put get HTTP requests decryption?
	
16. Now we have a securely established TLS 1.3 channel. 
	We know who is the server because we ve validate his certificate using trust store. But server knows nothing about who we are.
	There is a way called two way TLS when we give server our client sertificate but in real life it is very rare. 
	Another way is to use Basic Authentification to identify ourselfs on server side.
	
17. Basic auth page.

	Authentication schemes:

    Basic (see RFC 7617, base64-encoded credentials. See below for more information.),
    Bearer (see RFC 6750, bearer tokens to access OAuth 2.0-protected resources),
    Digest (see RFC 7616, only md5 hashing is supported in Firefox, see баг 472823 for SHA encryption support),
    HOBA (see RFC 7486 (draft), HTTP Origin-Bound Authentication, digital-signature-based),
    Mutual (see draft-ietf-httpauth-mutual),
    AWS4-HMAC-SHA256 (see AWS docs).
	
18. There are a few issues with HTTP Basic Auth:

		The password is sent over the wire in base64 encoding (which can be easily converted to plaintext).
		The password is sent repeatedly, for each request. (Larger attack window)
		The password is cached by the webbrowser, at a minimum for the length of the window / process. (Can be silently reused by any other request to the server, e.g. CSRF).
		The password may be stored permanently in the browser, if the user requests. (Same as previous point, in addition might be stolen by another user on a shared machine).

	Of those, using SSL only solves the first. And even with that, SSL only protects until the webserver - any internal routing, server logging, etc, will see the plaintext password.

	So, as with anything it's important to look at the whole picture.

	Does HTTPS protect the password in transit? Yes.
	Is that enough? Usually, no.
	
	
19. Form auth page.



	


C:\Users\Gosha>tracert wirecard.com

Трассировка маршрута к wirecard.com [2001:4c08:2012::190]
с максимальным числом прыжков 30:

  1     2 ms     9 ms     2 ms  fritz.box [2001:a61:ace:9401:f2b0:14ff:feb4:5253]
  2    38 ms    38 ms    37 ms  r3.muc7.m-online.net [2001:a60::89:703]
  3    56 ms    41 ms    62 ms  xe-9-0-0.bar1.Munich1.Level3.net [2001:1900:5:2:2::1e5]
  4    76 ms    57 ms    56 ms  lo-0.bar2.Hamburg1.Level3.net [2001:1900:2::3:9b]
  5    59 ms    57 ms    73 ms  2001:1900:5:2:2::2f65
  6    59 ms    78 ms    53 ms  2001:4c08:2012::190

Трассировка завершена.






/bank2agent-customers-successes/input

20. Whats next.