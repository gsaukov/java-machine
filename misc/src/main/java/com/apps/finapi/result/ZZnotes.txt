Hi Valeriia,

I ve completed the challenge and it is ready for review, please find it in the attachment.
Let me know if you have any questions.

For the results see com.apps.finapi.result.* package.
Initial challenge is in com.apps.finapi.challenge.*
You might need to add your own gradle/maven configuration to run the project.

All code was adjusted to production standards and covered with the tests.
Some method signatures were changed to better reflect their purpose.

CollectionUtils - replaced return type long with int to meet max possible Collection valid size.
Replaced method argument ArrayList with Collection interface expanding it and inlining with class name.

InstantiationCounter - System.out hard to cover with unit test using Scanner, can be covered with Integration/System test.

Pipeline - problem solved via classic solution from Oracle https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html.
As I understood Producer/Consumer inner classes and method main are used to manually check console for correctness of implementation?
Replaced it with proper unit test PipelineTest that simulates race conditions and checks the multythreaded consistency.

StringUtils - Algorithmic problem solved in nlog(n). Backed with test.

TransactionIdentifier - Replaced wrong original equals/hashCode with correct generated by IDE. Was doubting about the necessity of the test, but let it be.

Thank you,
Georgy

Archive folder structure.

.
└── src
    ├── test
    │   └── java
    │       └── com
    │           └── apps
    │               └── finapi
    │                   └── result
    │                       ├── CollectionUtilsTest.java
    │                       ├── InstantiationCounterTest.java
    │                       ├── PipelineTest.java
    │                       ├── StringUtilsTest.java
    │                       └── TransactionIdentifierTest.java
    └── main
        └── java
            └── com
                └── apps
                    └── finapi
                        ├── challenge
                        │   ├── CollectionUtils.java
                        │   ├── InstantiationCounter.java
                        │   ├── Pipeline.java
                        │   ├── StringUtils.java
                        │   └── TransactionIdentifier.java
                        └── result
                            ├── CollectionUtils.java
                            ├── InstantiationCounter.java
                            ├── Pipeline.java
                            ├── StringUtils.java
                            └── TransactionIdentifier.java


Hi,

Just to confirm.

Yes I m capable to design, concept, proof and build for you automation testing framework, based on your product specifics.
If and after it is accepted I can support testers and encourage/inspire developers to write tests using it by supplying them with a series of demos and examples.
Finally, solution and tests should be integrated into CI/CD pipeline to bypass only production ready code. That will help achieve necessary quality metrics and lack of L1/L2 incidents on production.

Kafka cluster I do have experience with docker/composer based cluster of 2 instances. Several producers/consumers and throughput of more than 10K messages a second.
https://github.com/gsaukov/java-machine/tree/master/docker/src/main/resources/kafka-cluster
So I can share, explain what and how I did it. Including offset tracking which is not that straight forward.

Thank you,
Georgy
